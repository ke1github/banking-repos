// Simple error utility module for the banking app

export interface AppError {
  code: ErrorCode;
  message: string;
  userMessage: string;
  details?: Record<string, unknown>;
  stack?: string;
  originalError?: unknown;
}

export enum ErrorCode {
  // Authentication errors
  UNAUTHORIZED = "UNAUTHORIZED",
  INVALID_CREDENTIALS = "INVALID_CREDENTIALS",
  SESSION_EXPIRED = "SESSION_EXPIRED",
  FORBIDDEN = "FORBIDDEN",
  AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  EMAIL_ALREADY_EXISTS = "EMAIL_ALREADY_EXISTS",
  ACCOUNT_LOCKED = "ACCOUNT_LOCKED",
  WEAK_PASSWORD = "WEAK_PASSWORD",

  // Data errors
  NOT_FOUND = "NOT_FOUND",
  VALIDATION_ERROR = "VALIDATION_ERROR",
  INVALID_DATA = "INVALID_DATA",

  // API errors
  API_ERROR = "API_ERROR",
  SERVICE_UNAVAILABLE = "SERVICE_UNAVAILABLE",
  RATE_LIMITED = "RATE_LIMITED",
  BAD_REQUEST = "BAD_REQUEST",
  CONFLICT = "CONFLICT",
  SERVER_ERROR = "SERVER_ERROR",
  TOO_MANY_REQUESTS = "TOO_MANY_REQUESTS",

  // Network errors
  NETWORK_ERROR = "NETWORK_ERROR",
  TIMEOUT_ERROR = "TIMEOUT_ERROR",
  CONNECTION_ERROR = "CONNECTION_ERROR",

  // Application errors
  INTERNAL_ERROR = "INTERNAL_ERROR",
  NOT_IMPLEMENTED = "NOT_IMPLEMENTED",

  // User input errors
  INVALID_INPUT = "INVALID_INPUT",
  MISSING_REQUIRED_FIELD = "MISSING_REQUIRED_FIELD",
  REQUIRED_FIELD_MISSING = "REQUIRED_FIELD_MISSING",
  INVALID_EMAIL_FORMAT = "INVALID_EMAIL_FORMAT",
  INVALID_PASSWORD_FORMAT = "INVALID_PASSWORD_FORMAT",
  INVALID_PHONE_FORMAT = "INVALID_PHONE_FORMAT",
  INVALID_DATE_FORMAT = "INVALID_DATE_FORMAT",
  INVALID_AMOUNT = "INVALID_AMOUNT",
  PASSWORDS_DO_NOT_MATCH = "PASSWORDS_DO_NOT_MATCH",

  // Transaction errors
  INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS",
  TRANSACTION_FAILED = "TRANSACTION_FAILED",

  // Unknown error
  UNKNOWN_ERROR = "UNKNOWN_ERROR",
}

// Factory function to create AppError objects
export function createAppError(
  code: ErrorCode,
  message: string,
  userMessage?: string,
  details?: Record<string, unknown>,
  originalError?: unknown
): AppError {
  return {
    code,
    message,
    userMessage: userMessage || message,
    details,
    stack: new Error().stack,
    originalError,
  };
}

// Function to check if an object is an AppError
export function isAppError(error: unknown): error is AppError {
  return (
    typeof error === "object" &&
    error !== null &&
    "code" in error &&
    "message" in error
  );
}

// Function to convert any error to an AppError
export function toAppError(error: unknown): AppError {
  if (isAppError(error)) {
    return error;
  }

  if (error instanceof Error) {
    return createAppError(
      ErrorCode.UNKNOWN_ERROR,
      error.message,
      "An unexpected error occurred",
      {},
      error
    );
  }

  return createAppError(
    ErrorCode.UNKNOWN_ERROR,
    typeof error === "string" ? error : "Unknown error",
    "An unexpected error occurred",
    {},
    error
  );
}
