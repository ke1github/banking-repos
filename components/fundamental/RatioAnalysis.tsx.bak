"use client";

import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Search, BarChart2, RefreshCw, Download, Zap } from "lucide-react";
import { fundamentalAnalysisService } from "@/lib/api/fundamentalAnalysisService";
import { FinancialRatio } from "@/lib/types/fundamental-analysis-types";

export default function RatioAnalysis() {
  const [searchTicker, setSearchTicker] = useState("");
  const [ticker, setTicker] = useState("AAPL");
  const [period, setPeriod] = useState("ttm");
  const [category, setCategory] = useState("profitability");
  const [ratios, setRatios] = useState<FinancialRatio[]>([]);
  const [loading, setLoading] = useState(true);
  const [industryAverage, setIndustryAverage] = useState<
    Record<string, number>
  >({});

  useEffect(() => {
    fetchRatios();
  }, [ticker, period, category]);

  const fetchRatios = async () => {
    setLoading(true);
    try {
      const data = await fundamentalAnalysisService.getFinancialRatios(
        ticker,
        period as "annual" | "quarterly" | "ttm",
        5 // Default limit value
      );
      setRatios(data);

      // Fetch industry averages - assuming there's a method for this
      // If this method doesn't exist, we should implement an alternative or comment this out
      /*
      const industryData =
        await fundamentalAnalysisService.getIndustryAverageRatios(
          ticker,
          period as "annual" | "quarterly" | "ttm",
          category
        );
      setIndustryAverage(industryData);
      */

      // For now, we'll use a mock value
      setIndustryAverage({});
    } catch (error) {
      console.error("Error fetching financial ratios:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = () => {
    if (searchTicker.trim()) {
      setTicker(searchTicker.toUpperCase());
    }
  };

  const formatRatioValue = (value: number, type: string) => {
    if (type === "percentage") {
      return `${value.toFixed(2)}%`;
    } else if (type === "multiple") {
      return value.toFixed(2) + "x";
    } else if (type === "days") {
      return value.toFixed(1) + " days";
    } else {
      return value.toFixed(2);
    }
  };

  const getComparisonIndicator = (
    ratio: any,
    industryAvg: number | undefined
  ) => {
    if (industryAvg === undefined) return null;

    let isGood = false;

    // Determine if the ratio is good based on industry average and ratio type
    switch (ratio.name) {
      case "Gross Margin":
      case "Operating Margin":
      case "Net Margin":
      case "ROE":
      case "ROA":
      case "ROIC":
      case "Current Ratio":
      case "Quick Ratio":
      case "Interest Coverage":
        isGood = ratio.value > industryAvg;
        break;
      case "Debt to Equity":
      case "Debt to Assets":
      case "Days Sales Outstanding":
      case "Days Inventory Outstanding":
      case "Days Payable Outstanding":
        isGood = ratio.value < industryAvg;
        break;
      default:
        return null;
    }

    const percentDiff = ((ratio.value - industryAvg) / industryAvg) * 100;
    const absPercentDiff = Math.abs(percentDiff);

    let color = "text-gray-500";
    if (isGood) {
      color = absPercentDiff > 20 ? "text-green-600" : "text-green-500";
    } else {
      color = absPercentDiff > 20 ? "text-red-600" : "text-red-500";
    }

    return (
      <span className={`ml-2 text-xs ${color}`}>
        {percentDiff > 0 ? "+" : ""}
        {percentDiff.toFixed(1)}% vs industry
      </span>
    );
  };

  const downloadCSV = () => {
    if (!ratios.length) return;

    const header = ["Ratio", "Value", "Industry Average", "Difference (%)"];
    const rows = [];

    // Get ratios based on selected category
    const ratioKeys = getRatioKeysByCategory();

    for (const key of ratioKeys) {
      const value = ratios[0]?.[key] as number | undefined;
      if (value === undefined) continue;

      const industryAvg = industryAverage[key] || 0;
      const diff = industryAvg
        ? ((value - industryAvg) / industryAvg) * 100
        : 0;

      rows.push([
        formatRatioLabel(key),
        value.toString(),
        industryAvg.toString(),
        diff.toFixed(2),
      ]);
    }

    const csvContent = [header.join(","), ...rows.map((r) => r.join(","))].join(
      "\n"
    );

    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", `${ticker}_${category}_ratios_${period}.csv`);
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const periodOptions = [
    { value: "ttm", label: "Trailing Twelve Months" },
    { value: "annual", label: "Annual" },
    { value: "quarterly", label: "Quarterly" },
  ];

  const categoryOptions = [
    { value: "profitability", label: "Profitability" },
    { value: "liquidity", label: "Liquidity" },
    { value: "solvency", label: "Solvency" },
    { value: "efficiency", label: "Efficiency" },
    { value: "valuation", label: "Valuation" },
  ];

  const renderTableContent = () => {
    if (loading) {
      return (
        <div className="flex justify-center items-center p-8">
          <RefreshCw className="w-6 h-6 animate-spin text-blue-500" />
          <span className="ml-2">Loading ratio data...</span>
        </div>
      );
    }

    if (!ratios.length) {
      return (
        <div className="text-center p-8 text-gray-500">
          No ratio data available for this ticker.
        </div>
      );
    }

    return (
      <Table className="border">
        <TableHeader className="bg-gray-50">
          <TableRow>
            <TableHead>Ratio</TableHead>
            <TableHead className="text-right">Value</TableHead>
            <TableHead className="text-right">Industry Avg</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {ratios.map((ratio, i) => (
            <TableRow key={i}>
              <TableCell className="font-medium">{ratio.name}</TableCell>
              <TableCell className="text-right">
                {formatRatioValue(ratio.value, ratio.unit)}
                {getComparisonIndicator(ratio, industryAverage[ratio.name])}
              </TableCell>
              <TableCell className="text-right">
                {industryAverage[ratio.name] !== undefined
                  ? formatRatioValue(industryAverage[ratio.name], ratio.unit)
                  : "N/A"}
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    );
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader className="pb-3">
          <CardTitle>Financial Ratio Analysis</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4 md:flex-row md:items-end mb-6">
            <div className="flex-1 flex space-x-2">
              <Input
                placeholder="Enter stock ticker (e.g., AAPL)"
                value={searchTicker}
                onChange={(e) => setSearchTicker(e.target.value)}
                onKeyDown={(e) => e.key === "Enter" && handleSearch()}
                className="flex-1"
              />
              <Button onClick={handleSearch}>
                <Search className="h-4 w-4 mr-2" />
                Search
              </Button>
            </div>

            <div className="flex space-x-2">
              <Select value={category} onValueChange={setCategory}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Ratio Category" />
                </SelectTrigger>
                <SelectContent>
                  {categoryOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Select value={period} onValueChange={setPeriod}>
                <SelectTrigger className="w-[230px]">
                  <SelectValue placeholder="Period" />
                </SelectTrigger>
                <SelectContent>
                  {periodOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Button
                variant="outline"
                onClick={downloadCSV}
                disabled={!ratios.length}
              >
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </div>
          </div>

          <div className="overflow-x-auto">{renderTableContent()}</div>

          {ratios.length > 0 && (
            <div className="mt-4 p-4 bg-blue-50 rounded-md flex items-start">
              <Zap className="h-5 w-5 text-blue-500 mt-0.5 mr-2 flex-shrink-0" />
              <div className="text-sm text-blue-800">
                <p className="font-medium">Key Insights:</p>
                <ul className="list-disc pl-5 mt-1 space-y-1">
                  {category === "profitability" && (
                    <>
                      <li>
                        Profit margins{" "}
                        {ratios[0]?.value > industryAverage[ratios[0]?.name]
                          ? "exceed"
                          : "lag behind"}{" "}
                        industry averages, indicating{" "}
                        {ratios[0]?.value > industryAverage[ratios[0]?.name]
                          ? "strong"
                          : "challenged"}{" "}
                        operational efficiency.
                      </li>
                      <li>
                        Return metrics suggest{" "}
                        {ratios[1]?.value > industryAverage[ratios[1]?.name]
                          ? "effective"
                          : "inefficient"}{" "}
                        use of capital compared to peers.
                      </li>
                    </>
                  )}
                  {category === "liquidity" && (
                    <>
                      <li>
                        The company has{" "}
                        {ratios[0]?.value > 1.5
                          ? "healthy"
                          : "potential concerns with"}{" "}
                        short-term liquidity to cover immediate obligations.
                      </li>
                      <li>
                        Quick ratio indicates{" "}
                        {ratios[1]?.value > 1.0
                          ? "sufficient"
                          : "potentially insufficient"}{" "}
                        liquid assets available.
                      </li>
                    </>
                  )}
                  {category === "solvency" && (
                    <>
                      <li>
                        Debt levels are{" "}
                        {ratios[0]?.value < industryAverage[ratios[0]?.name]
                          ? "lower"
                          : "higher"}{" "}
                        than industry averages, suggesting{" "}
                        {ratios[0]?.value < industryAverage[ratios[0]?.name]
                          ? "conservative"
                          : "aggressive"}{" "}
                        financial leverage.
                      </li>
                      <li>
                        Interest coverage ratio shows{" "}
                        {ratios[2]?.value > 3
                          ? "comfortable"
                          : "potential strain in"}{" "}
                        ability to service debt obligations.
                      </li>
                    </>
                  )}
                </ul>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
