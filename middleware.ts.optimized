import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { isPublicRoute, ROUTES } from '@/constants/route';

export function middleware(request: NextRequest) {
  const authCookie = request.cookies.get('auth')?.value;
  const isAuthRoute = isPublicRoute(request.nextUrl.pathname);

  // Protected route but no auth cookie
  if (!authCookie && !isAuthRoute) {
    const signInUrl = new URL(ROUTES.SIGN_IN, request.url);
    
    // Add the original URL as a searchParam to redirect after login
    signInUrl.searchParams.set('callbackUrl', request.nextUrl.pathname);
    
    return NextResponse.redirect(signInUrl);
  }
  
  // Note: We intentionally do not redirect authenticated users away from auth routes
  // This avoids redirect loops when the cookie exists but the session is expired
  
  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except:
     * - API routes
     * - Static files (Next.js defaults)
     * - Server action calls
     * - Images and icons
     * - Favicon
     */
    '/((?!api|_next/static|_next/image|_next/server-actions|icons|favicon.ico).*)',
  ],
};
